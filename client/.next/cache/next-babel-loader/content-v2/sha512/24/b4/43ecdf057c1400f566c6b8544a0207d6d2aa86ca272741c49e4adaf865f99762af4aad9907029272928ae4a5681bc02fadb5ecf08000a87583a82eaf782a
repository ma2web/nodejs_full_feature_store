{"ast":null,"code":"/* eslint-disable no-console */\nimport { ApolloClient, InMemoryCache } from \"@apollo/client\";\nimport { useMemo } from \"react\";\nimport { AppEndpoints, EndpointType } from \"./const\";\nimport { createLink } from \"./links\"; // import { link } from './links'\n\nexport const APOLLO_STATE_PROP_NAME = \"__APOLLO_STATE__\";\nlet apolloClient;\nconst cache = new InMemoryCache();\nconst link = createLink(AppEndpoints.main, [EndpointType.CMS, AppEndpoints.cms], [EndpointType.Auth, AppEndpoints.auth]);\n\nconst createApolloClient = () => {\n  return new ApolloClient({\n    ssrMode: true,\n    // We have to determine app is running on server or client\n    link: link,\n    cache,\n    connectToDevTools: true\n  });\n};\n\nexport const initializeApollo = (initialState = undefined) => {\n  var _apolloClient2, _apolloClient3;\n\n  /**\n   * Client: if there is an instance of apolloClient use that, unless create a new one\n   * Server: on Server Every time we create a new instance of apolloClient\n   */\n  const _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient();\n\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  } // // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // // gets hydrated here\n  // if (initialState) {\n  //   // Get existing cache, loaded during client side data fetching\n  //   const existingCache = _apolloClient.extract()\n  //   const mergeFailedItems = []\n  //   // Merge the existing cache into data passed from getStaticProps/getServerSideProps\n  //   const data = merge(initialState, existingCache, {\n  //     // combine arrays using object equality (like in sets)\n  //     arrayMerge: (destinationArray, sourceArray) => [\n  //       ...sourceArray,\n  //       ...destinationArray.filter((d) =>\n  //         sourceArray.every((s) => {\n  //           try {\n  //             return !isEqual(d, s)\n  //           } catch (error) {\n  //             mergeFailedItems.push({\n  //               source: s,\n  //               dest: d,\n  //               error: error.message,\n  //             })\n  //             return true\n  //           }\n  //         }),\n  //       ),\n  //     ],\n  //   })\n  //   // log failed cases\n  //   if (mergeFailedItems.length !== 0 && typeof window === 'undefined') {\n  //     const chalk = require('chalk')\n  //     if (process.env.NODE_ENV === 'development') {\n  //       console.log(\n  //         chalk.bgRed('[ERROR][APOLLO_CLIENT][MERGE_FAILED]') +\n  //           JSON.stringify(mergeFailedItems),\n  //       )\n  //     } else {\n  //       console.log('[ERROR][APOLLO_CLIENT][MERGE_FAILED]')\n  //     }\n  //   }\n  //   // Restore the cache with the merged data\n  //   _apolloClient.cache.restore(data)\n  // }\n\n  /**\n   * For SSG and SSR always create a new Apollo Client\n   * So: caches on server doesn't *conflict* with each other\n   */\n\n\n  if (true) {\n    return _apolloClient;\n  } // Create the Apollo Client once in the client\n\n\n  apolloClient = (_apolloClient3 = apolloClient) !== null && _apolloClient3 !== void 0 ? _apolloClient3 : _apolloClient;\n  return apolloClient;\n};\nexport function addApolloState(client, pageProps) {\n  if (pageProps !== null && pageProps !== void 0 && pageProps.props) {\n    pageProps.props[APOLLO_STATE_PROP_NAME] = client.cache.extract();\n  }\n\n  return pageProps;\n}\nexport function useApollo(pageProps) {\n  const state = pageProps[APOLLO_STATE_PROP_NAME];\n  const store = useMemo(() => initializeApollo(state), [state]);\n  return store;\n}","map":{"version":3,"sources":["/home/mohammad/projects/dorreh/market multi/client/src/core/apollo/client.ts"],"names":["ApolloClient","InMemoryCache","useMemo","AppEndpoints","EndpointType","createLink","APOLLO_STATE_PROP_NAME","apolloClient","cache","link","main","CMS","cms","Auth","auth","createApolloClient","ssrMode","connectToDevTools","initializeApollo","initialState","undefined","_apolloClient","restore","addApolloState","client","pageProps","props","extract","useApollo","state","store"],"mappings":"AAAA;AACA,SACEA,YADF,EAGEC,aAHF,QAMO,gBANP;AAOA,SAASC,OAAT,QAAwB,OAAxB;AAMA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,SAA3C;AACA,SAASC,UAAT,QAA2B,SAA3B,C,CAEA;;AAEA,OAAO,MAAMC,sBAAsB,GAAG,kBAA/B;AACP,IAAIC,YAAJ;AAEA,MAAMC,KAAK,GAAG,IAAIP,aAAJ,EAAd;AAEA,MAAMQ,IAAI,GAAGJ,UAAU,CACrBF,YAAY,CAACO,IADQ,EAErB,CAACN,YAAY,CAACO,GAAd,EAAmBR,YAAY,CAACS,GAAhC,CAFqB,EAGrB,CAACR,YAAY,CAACS,IAAd,EAAoBV,YAAY,CAACW,IAAjC,CAHqB,CAAvB;;AAMA,MAAMC,kBAAkB,GAAG,MAAM;AAC/B,SAAO,IAAIf,YAAJ,CAAiB;AACtBgB,IAAAA,OAAO,MADe;AACkB;AACxCP,IAAAA,IAAI,EAAEA,IAFgB;AAGtBD,IAAAA,KAHsB;AAItBS,IAAAA,iBAAiB,EAAE;AAJG,GAAjB,CAAP;AAMD,CAPD;;AASA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,YAAiB,GAAGC,SAArB,KAAmC;AAAA;;AACjE;AACF;AACA;AACA;AACE,QAAMC,aAAa,qBAAGd,YAAH,2DAAmBQ,kBAAkB,EAAxD;;AAEA,MAAII,YAAJ,EAAkB;AAChBE,IAAAA,aAAa,CAACb,KAAd,CAAoBc,OAApB,CAA4BH,YAA5B;AACD,GATgE,CAWjE;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACF;AACA;AACA;;;AACE,YAAmC;AACjC,WAAOE,aAAP;AACD,GA/DgE,CAgEjE;;;AACAd,EAAAA,YAAY,qBAAGA,YAAH,2DAAmBc,aAA/B;AAEA,SAAOd,YAAP;AACD,CApEM;AAsEP,OAAO,SAASgB,cAAT,CACLC,MADK,EAELC,SAFK,EAGL;AACA,MAAIA,SAAJ,aAAIA,SAAJ,eAAIA,SAAS,CAAEC,KAAf,EAAsB;AACpBD,IAAAA,SAAS,CAACC,KAAV,CAAgBpB,sBAAhB,IAA0CkB,MAAM,CAAChB,KAAP,CAAamB,OAAb,EAA1C;AACD;;AACD,SAAOF,SAAP;AACD;AAED,OAAO,SAASG,SAAT,CAAmBH,SAAnB,EAAmC;AACxC,QAAMI,KAAK,GAAGJ,SAAS,CAACnB,sBAAD,CAAvB;AACA,QAAMwB,KAAK,GAAG5B,OAAO,CAAC,MAAMgB,gBAAgB,CAACW,KAAD,CAAvB,EAAgC,CAACA,KAAD,CAAhC,CAArB;AACA,SAAOC,KAAP;AACD","sourcesContent":["/* eslint-disable no-console */\nimport {\n  ApolloClient,\n  HttpLink,\n  InMemoryCache,\n  NormalizedCacheObject,\n  ApolloLink,\n} from \"@apollo/client\";\nimport { useMemo } from \"react\";\nimport merge from \"deepmerge\";\nimport isEqual from \"react-fast-compare\";\n\nimport { ApolloLinkLogger } from \"./logger\";\nimport { Operation } from \"@apollo/client\";\nimport { AppEndpoints, EndpointType } from \"./const\";\nimport { createLink } from \"./links\";\n\n// import { link } from './links'\n\nexport const APOLLO_STATE_PROP_NAME = \"__APOLLO_STATE__\";\nlet apolloClient: ApolloClient<NormalizedCacheObject>;\n\nconst cache = new InMemoryCache();\n\nconst link = createLink(\n  AppEndpoints.main,\n  [EndpointType.CMS, AppEndpoints.cms],\n  [EndpointType.Auth, AppEndpoints.auth]\n);\n\nconst createApolloClient = () => {\n  return new ApolloClient({\n    ssrMode: typeof window === \"undefined\", // We have to determine app is running on server or client\n    link: link,\n    cache,\n    connectToDevTools: true,\n  });\n};\n\nexport const initializeApollo = (initialState: any = undefined) => {\n  /**\n   * Client: if there is an instance of apolloClient use that, unless create a new one\n   * Server: on Server Every time we create a new instance of apolloClient\n   */\n  const _apolloClient = apolloClient ?? createApolloClient();\n\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  }\n\n  // // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // // gets hydrated here\n  // if (initialState) {\n  //   // Get existing cache, loaded during client side data fetching\n  //   const existingCache = _apolloClient.extract()\n\n  //   const mergeFailedItems = []\n  //   // Merge the existing cache into data passed from getStaticProps/getServerSideProps\n  //   const data = merge(initialState, existingCache, {\n  //     // combine arrays using object equality (like in sets)\n  //     arrayMerge: (destinationArray, sourceArray) => [\n  //       ...sourceArray,\n  //       ...destinationArray.filter((d) =>\n  //         sourceArray.every((s) => {\n  //           try {\n  //             return !isEqual(d, s)\n  //           } catch (error) {\n  //             mergeFailedItems.push({\n  //               source: s,\n  //               dest: d,\n  //               error: error.message,\n  //             })\n  //             return true\n  //           }\n  //         }),\n  //       ),\n  //     ],\n  //   })\n\n  //   // log failed cases\n  //   if (mergeFailedItems.length !== 0 && typeof window === 'undefined') {\n  //     const chalk = require('chalk')\n  //     if (process.env.NODE_ENV === 'development') {\n  //       console.log(\n  //         chalk.bgRed('[ERROR][APOLLO_CLIENT][MERGE_FAILED]') +\n  //           JSON.stringify(mergeFailedItems),\n  //       )\n  //     } else {\n  //       console.log('[ERROR][APOLLO_CLIENT][MERGE_FAILED]')\n  //     }\n  //   }\n\n  //   // Restore the cache with the merged data\n  //   _apolloClient.cache.restore(data)\n  // }\n\n  /**\n   * For SSG and SSR always create a new Apollo Client\n   * So: caches on server doesn't *conflict* with each other\n   */\n  if (typeof window === \"undefined\") {\n    return _apolloClient;\n  }\n  // Create the Apollo Client once in the client\n  apolloClient = apolloClient ?? _apolloClient;\n\n  return apolloClient;\n};\n\nexport function addApolloState(\n  client: ApolloClient<NormalizedCacheObject>,\n  pageProps: any\n) {\n  if (pageProps?.props) {\n    pageProps.props[APOLLO_STATE_PROP_NAME] = client.cache.extract();\n  }\n  return pageProps;\n}\n\nexport function useApollo(pageProps: any) {\n  const state = pageProps[APOLLO_STATE_PROP_NAME];\n  const store = useMemo(() => initializeApollo(state), [state]);\n  return store;\n}\n"]},"metadata":{},"sourceType":"module"}