{"ast":null,"code":"// /* eslint-disable no-console */\n// import {\n//   ApolloClient,\n//   HttpLink,\n//   InMemoryCache,\n//   NormalizedCacheObject,\n//   ApolloLink,\n// } from \"@apollo/client\";\n// import { useMemo } from \"react\";\n// import merge from \"deepmerge\";\n// import isEqual from \"react-fast-compare\";\n// import { ApolloLinkLogger } from \"./logger\";\n// import { Operation } from \"@apollo/client\";\n// import { AppEndpoints, EndpointType } from \"./const\";\n// import { createLink } from \"./links\";\n// // import { link } from './links'\n// export const APOLLO_STATE_PROP_NAME = \"__APOLLO_STATE__\";\n// let apolloClient: ApolloClient<NormalizedCacheObject>;\n// const cache = new InMemoryCache();\n// const link = createLink(\n//   AppEndpoints.main,\n//   [EndpointType.CMS, AppEndpoints.cms],\n//   [EndpointType.Auth, AppEndpoints.auth]\n// );\n// const createApolloClient = () => {\n//   return new ApolloClient({\n//     ssrMode: typeof window === \"undefined\", // We have to determine app is running on server or client\n//     link: link,\n//     cache,\n//     connectToDevTools: true,\n//   });\n// };\n// export const initializeApollo = (initialState: any = undefined) => {\n//   /**\n//    * Client: if there is an instance of apolloClient use that, unless create a new one\n//    * Server: on Server Every time we create a new instance of apolloClient\n//    */\n//   const _apolloClient = apolloClient ?? createApolloClient();\n//   if (initialState) {\n//     _apolloClient.cache.restore(initialState);\n//   }\n//   // // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n//   // // gets hydrated here\n//   // if (initialState) {\n//   //   // Get existing cache, loaded during client side data fetching\n//   //   const existingCache = _apolloClient.extract()\n//   //   const mergeFailedItems = []\n//   //   // Merge the existing cache into data passed from getStaticProps/getServerSideProps\n//   //   const data = merge(initialState, existingCache, {\n//   //     // combine arrays using object equality (like in sets)\n//   //     arrayMerge: (destinationArray, sourceArray) => [\n//   //       ...sourceArray,\n//   //       ...destinationArray.filter((d) =>\n//   //         sourceArray.every((s) => {\n//   //           try {\n//   //             return !isEqual(d, s)\n//   //           } catch (error) {\n//   //             mergeFailedItems.push({\n//   //               source: s,\n//   //               dest: d,\n//   //               error: error.message,\n//   //             })\n//   //             return true\n//   //           }\n//   //         }),\n//   //       ),\n//   //     ],\n//   //   })\n//   //   // log failed cases\n//   //   if (mergeFailedItems.length !== 0 && typeof window === 'undefined') {\n//   //     const chalk = require('chalk')\n//   //     if (process.env.NODE_ENV === 'development') {\n//   //       console.log(\n//   //         chalk.bgRed('[ERROR][APOLLO_CLIENT][MERGE_FAILED]') +\n//   //           JSON.stringify(mergeFailedItems),\n//   //       )\n//   //     } else {\n//   //       console.log('[ERROR][APOLLO_CLIENT][MERGE_FAILED]')\n//   //     }\n//   //   }\n//   //   // Restore the cache with the merged data\n//   //   _apolloClient.cache.restore(data)\n//   // }\n//   /**\n//    * For SSG and SSR always create a new Apollo Client\n//    * So: caches on server doesn't *conflict* with each other\n//    */\n//   if (typeof window === \"undefined\") {\n//     return _apolloClient;\n//   }\n//   // Create the Apollo Client once in the client\n//   apolloClient = apolloClient ?? _apolloClient;\n//   return apolloClient;\n// };\n// export function addApolloState(\n//   client: ApolloClient<NormalizedCacheObject>,\n//   pageProps: any\n// ) {\n//   if (pageProps?.props) {\n//     pageProps.props[APOLLO_STATE_PROP_NAME] = client.cache.extract();\n//   }\n//   return pageProps;\n// }\n// export function useApollo(pageProps: any) {\n//   const state = pageProps[APOLLO_STATE_PROP_NAME];\n//   const store = useMemo(() => initializeApollo(state), [state]);\n//   return store;\n// }","map":{"version":3,"sources":["/home/mohammad/projects/dorreh/market multi/client/src/core/apollo/client.ts"],"names":[],"mappingssourcesContent":["// /* eslint-disable no-console */\n// import {\n//   ApolloClient,\n//   HttpLink,\n//   InMemoryCache,\n//   NormalizedCacheObject,\n//   ApolloLink,\n// } from \"@apollo/client\";\n// import { useMemo } from \"react\";\n// import merge from \"deepmerge\";\n// import isEqual from \"react-fast-compare\";\n\n// import { ApolloLinkLogger } from \"./logger\";\n// import { Operation } from \"@apollo/client\";\n// import { AppEndpoints, EndpointType } from \"./const\";\n// import { createLink } from \"./links\";\n\n// // import { link } from './links'\n\n// export const APOLLO_STATE_PROP_NAME = \"__APOLLO_STATE__\";\n// let apolloClient: ApolloClient<NormalizedCacheObject>;\n\n// const cache = new InMemoryCache();\n\n// const link = createLink(\n//   AppEndpoints.main,\n//   [EndpointType.CMS, AppEndpoints.cms],\n//   [EndpointType.Auth, AppEndpoints.auth]\n// );\n\n// const createApolloClient = () => {\n//   return new ApolloClient({\n//     ssrMode: typeof window === \"undefined\", // We have to determine app is running on server or client\n//     link: link,\n//     cache,\n//     connectToDevTools: true,\n//   });\n// };\n\n// export const initializeApollo = (initialState: any = undefined) => {\n//   /**\n//    * Client: if there is an instance of apolloClient use that, unless create a new one\n//    * Server: on Server Every time we create a new instance of apolloClient\n//    */\n//   const _apolloClient = apolloClient ?? createApolloClient();\n\n//   if (initialState) {\n//     _apolloClient.cache.restore(initialState);\n//   }\n\n//   // // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n//   // // gets hydrated here\n//   // if (initialState) {\n//   //   // Get existing cache, loaded during client side data fetching\n//   //   const existingCache = _apolloClient.extract()\n\n//   //   const mergeFailedItems = []\n//   //   // Merge the existing cache into data passed from getStaticProps/getServerSideProps\n//   //   const data = merge(initialState, existingCache, {\n//   //     // combine arrays using object equality (like in sets)\n//   //     arrayMerge: (destinationArray, sourceArray) => [\n//   //       ...sourceArray,\n//   //       ...destinationArray.filter((d) =>\n//   //         sourceArray.every((s) => {\n//   //           try {\n//   //             return !isEqual(d, s)\n//   //           } catch (error) {\n//   //             mergeFailedItems.push({\n//   //               source: s,\n//   //               dest: d,\n//   //               error: error.message,\n//   //             })\n//   //             return true\n//   //           }\n//   //         }),\n//   //       ),\n//   //     ],\n//   //   })\n\n//   //   // log failed cases\n//   //   if (mergeFailedItems.length !== 0 && typeof window === 'undefined') {\n//   //     const chalk = require('chalk')\n//   //     if (process.env.NODE_ENV === 'development') {\n//   //       console.log(\n//   //         chalk.bgRed('[ERROR][APOLLO_CLIENT][MERGE_FAILED]') +\n//   //           JSON.stringify(mergeFailedItems),\n//   //       )\n//   //     } else {\n//   //       console.log('[ERROR][APOLLO_CLIENT][MERGE_FAILED]')\n//   //     }\n//   //   }\n\n//   //   // Restore the cache with the merged data\n//   //   _apolloClient.cache.restore(data)\n//   // }\n\n//   /**\n//    * For SSG and SSR always create a new Apollo Client\n//    * So: caches on server doesn't *conflict* with each other\n//    */\n//   if (typeof window === \"undefined\") {\n//     return _apolloClient;\n//   }\n//   // Create the Apollo Client once in the client\n//   apolloClient = apolloClient ?? _apolloClient;\n\n//   return apolloClient;\n// };\n\n// export function addApolloState(\n//   client: ApolloClient<NormalizedCacheObject>,\n//   pageProps: any\n// ) {\n//   if (pageProps?.props) {\n//     pageProps.props[APOLLO_STATE_PROP_NAME] = client.cache.extract();\n//   }\n//   return pageProps;\n// }\n\n// export function useApollo(pageProps: any) {\n//   const state = pageProps[APOLLO_STATE_PROP_NAME];\n//   const store = useMemo(() => initializeApollo(state), [state]);\n//   return store;\n// }\n"]},"metadata":{},"sourceType":"script"}