{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport cs from \"classnames\";\nimport useStyle from \"./GolButton.style\";\nconst GolButton = /*#__PURE__*/forwardRef((_ref, ref) => {\n  let {\n    variant,\n    hasNeutral,\n    ripple,\n    color,\n    children,\n    className,\n    classes\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"variant\", \"hasNeutral\", \"ripple\", \"color\", \"children\", \"className\", \"classes\"]);\n\n  const styles = useStyle({\n    variant,\n    ripple,\n    classes\n  });\n  const isNeutral = !!hasNeutral && !!variant;\n  const neutralClassName = styles[`${variant}Neutral`];\n  return /*#__PURE__*/_jsx(Button, _objectSpread(_objectSpread(_objectSpread({\n    ref: ref,\n    className: cs(className, {\n      [neutralClassName]: isNeutral\n    }),\n    color: hasNeutral ? undefined : color\n  }, {\n    classes: {\n      root: styles.root,\n      containedSecondary: styles.containedSecondary,\n      outlinedSecondary: styles.outlinedSecondary,\n      textSecondary: styles.textSecondary,\n      containedPrimary: styles.containedPrimary,\n      outlinedPrimary: styles.outlinedPrimary,\n      textPrimary: styles.textPrimary\n    },\n    variant\n  }), props), {}, {\n    children: children\n  }));\n});\nGolButton.displayName = \"GolButton\";\nGolButton.defaultProps = {\n  variant: \"contained\",\n  color: \"primary\",\n  ripple: \"animated\"\n};\nexport default GolButton;","map":null,"metadata":{},"sourceType":"module"}