{"ast":null,"code":"/* eslint-disable no-console */\nimport chalk from 'chalk';\n\nvar ApolloLinkLogger = function ApolloLinkLogger(operation, forward) {\n  return forward(operation).map(function (result) {\n    if (true) {\n      return result;\n    }\n\n    try {\n      var context = operation.getContext();\n      console.log(chalk.keyword('orange')(\"[APOLLO_CLIENT]\") + \"[\".concat(operation.operationName, \"]\") + chalk.greenBright(\" \".concat(JSON.stringify({\n        headers: context === null || context === void 0 ? void 0 : context.headers,\n        variables: operation.variables\n      }))));\n    } catch (error) {\n      console.log(chalk.bgRed('[ERROR]') + ' ' + error.message);\n    }\n\n    return result;\n  });\n};\n\n_c = ApolloLinkLogger;\nexport { ApolloLinkLogger };\n\nvar _c;\n\n$RefreshReg$(_c, \"ApolloLinkLogger\");","map":{"version":3,"sources":["/home/mohammad/projects/dorreh/market multi/client/src/core/apollo/logger.ts"],"names":["chalk","ApolloLinkLogger","operation","forward","map","result","context","getContext","console","log","keyword","operationName","greenBright","JSON","stringify","headers","variables","error","bgRed","message"],"mappings":"AAAA;AAGA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,SAAD,EAAuBC,OAAvB,EAAmC;AAC1D,SAAOA,OAAO,CAACD,SAAD,CAAP,CAAmBE,GAAnB,CAAuB,UAACC,MAAD,EAAyB;AACrD,cAAmC;AACjC,aAAOA,MAAP;AACD;;AAED,QAAI;AACF,UAAMC,OAAO,GAAGJ,SAAS,CAACK,UAAV,EAAhB;AACAC,MAAAA,OAAO,CAACC,GAAR,CACET,KAAK,CAACU,OAAN,CAAc,QAAd,kCACMR,SAAS,CAACS,aADhB,SAEEX,KAAK,CAACY,WAAN,YACMC,IAAI,CAACC,SAAL,CAAe;AACjBC,QAAAA,OAAO,EAAET,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAES,OADD;AAEjBC,QAAAA,SAAS,EAAEd,SAAS,CAACc;AAFJ,OAAf,CADN,EAHJ;AAUD,KAZD,CAYE,OAAOC,KAAP,EAAc;AACdT,MAAAA,OAAO,CAACC,GAAR,CAAYT,KAAK,CAACkB,KAAN,CAAY,SAAZ,IAAyB,GAAzB,GAA+BD,KAAK,CAACE,OAAjD;AACD;;AAED,WAAOd,MAAP;AACD,GAtBM,CAAP;AAuBD,CAxBD;;KAAMJ,gB;AA0BN,SAASA,gBAAT","sourcesContent":["/* eslint-disable no-console */\n\nimport { Operation, QueryResult } from '@apollo/client'\nimport chalk from 'chalk'\n\nconst ApolloLinkLogger = (operation: Operation, forward) => {\n  return forward(operation).map((result: QueryResult) => {\n    if (typeof window !== 'undefined') {\n      return result\n    }\n\n    try {\n      const context = operation.getContext()\n      console.log(\n        chalk.keyword('orange')(`[APOLLO_CLIENT]`) +\n          `[${operation.operationName}]` +\n          chalk.greenBright(\n            ` ${JSON.stringify({\n              headers: context?.headers,\n              variables: operation.variables,\n            })}`,\n          ),\n      )\n    } catch (error) {\n      console.log(chalk.bgRed('[ERROR]') + ' ' + error.message)\n    }\n\n    return result\n  })\n}\n\nexport { ApolloLinkLogger }\n"]},"metadata":{},"sourceType":"module"}