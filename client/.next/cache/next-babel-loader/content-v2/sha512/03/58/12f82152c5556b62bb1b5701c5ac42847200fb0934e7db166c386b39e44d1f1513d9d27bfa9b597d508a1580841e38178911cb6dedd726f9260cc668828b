{"ast":null,"code":"import _slicedToArray from \"/home/mohammad/projects/dorreh/market multi/client/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { ApolloLink, HttpLink } from \"@apollo/client\";\nimport { AppEndpoints, EndpointType } from \"./const\";\nimport { checkContextForEndpoint } from \"./helpers\";\nimport { ApolloLinkLogger } from \"./logger\";\nconsole.log(HttpLink);\n\nvar createConditionalLink = function createConditionalLink(appLink, mainEndpoint, domainEndpoints) {\n  return domainEndpoints.reduceRight(function (acc, _ref, i, _ref2) {\n    var _ref3 = _slicedToArray(_ref, 2),\n        endpoint = _ref3[0],\n        epLink = _ref3[1];\n\n    var _ref4 = _ref2[i + 1];\n    _ref4 = _ref4 === void 0 ? [EndpointType.Main, mainEndpoint] : _ref4;\n\n    var _ref5 = _slicedToArray(_ref4, 2),\n        nextLink = _ref5[1];\n\n    return acc.split(checkContextForEndpoint(endpoint), epLink, nextLink);\n  }, appLink);\n};\n\nexport var createLink = function createLink(mainEndpoint) {\n  // other links like error reporters or auth token validations can be set here\n  var appDefaultLink = ApolloLink.from([ApolloLinkLogger]);\n\n  for (var _len = arguments.length, domainEndpoints = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    domainEndpoints[_key - 1] = arguments[_key];\n  }\n\n  if (!domainEndpoints.length) return appDefaultLink.concat(mainEndpoint);\n  return createConditionalLink(appDefaultLink, mainEndpoint, domainEndpoints);\n};\nvar cmsLink = ApolloLink.split(checkContextForEndpoint(EndpointType.CMS), AppEndpoints.cms);\nvar authLink = ApolloLink.split(checkContextForEndpoint(EndpointType.Auth), AppEndpoints.auth, cmsLink);\nconsole.log(authLink);\nexport var link = authLink;","map":{"version":3,"sources":["/home/mohammad/projects/dorreh/market multi/client/src/core/apollo/links.ts"],"names":["ApolloLink","HttpLink","AppEndpoints","EndpointType","checkContextForEndpoint","ApolloLinkLogger","console","log","createConditionalLink","appLink","mainEndpoint","domainEndpoints","reduceRight","acc","i","endpoint","epLink","Main","nextLink","split","createLink","appDefaultLink","from","length","concat","cmsLink","CMS","cms","authLink","Auth","auth","link"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,QAArB,QAAqC,gBAArC;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,SAA3C;AACA,SAASC,uBAAT,QAAwC,WAAxC;AACA,SAASC,gBAAT,QAAiC,UAAjC;AAIAC,OAAO,CAACC,GAAR,CAAYN,QAAZ;;AAEA,IAAMO,qBAAqB,GAAG,SAAxBA,qBAAwB,CAC5BC,OAD4B,EAE5BC,YAF4B,EAG5BC,eAH4B;AAAA,SAK5BA,eAAe,CAACC,WAAhB,CACE,UACEC,GADF,QAGEC,CAHF;AAAA;AAAA,QAEGC,QAFH;AAAA,QAEaC,MAFb;;AAAA,sBAIKF,CAAC,GAAG,CAJT;AAAA,+BAI4B,CAACX,YAAY,CAACc,IAAd,EAAoBP,YAApB,CAJ5B;;AAAA;AAAA,QAIgBQ,QAJhB;;AAAA,WAKKL,GAAG,CAACM,KAAJ,CAAUf,uBAAuB,CAACW,QAAD,CAAjC,EAA6CC,MAA7C,EAAqDE,QAArD,CALL;AAAA,GADF,EAOET,OAPF,CAL4B;AAAA,CAA9B;;AAeA,OAAO,IAAMW,UAAU,GAAG,SAAbA,UAAa,CACxBV,YADwB,EAGrB;AACH;AACA,MAAMW,cAAc,GAAGrB,UAAU,CAACsB,IAAX,CAAgB,CAACjB,gBAAD,CAAhB,CAAvB;;AAFG,oCADAM,eACA;AADAA,IAAAA,eACA;AAAA;;AAIH,MAAI,CAACA,eAAe,CAACY,MAArB,EAA6B,OAAOF,cAAc,CAACG,MAAf,CAAsBd,YAAtB,CAAP;AAE7B,SAAOF,qBAAqB,CAACa,cAAD,EAAiBX,YAAjB,EAA+BC,eAA/B,CAA5B;AACD,CAVM;AAYP,IAAMc,OAAO,GAAGzB,UAAU,CAACmB,KAAX,CACdf,uBAAuB,CAACD,YAAY,CAACuB,GAAd,CADT,EAEdxB,YAAY,CAACyB,GAFC,CAAhB;AAKA,IAAMC,QAAQ,GAAG5B,UAAU,CAACmB,KAAX,CACff,uBAAuB,CAACD,YAAY,CAAC0B,IAAd,CADR,EAEf3B,YAAY,CAAC4B,IAFE,EAGfL,OAHe,CAAjB;AAMAnB,OAAO,CAACC,GAAR,CAAYqB,QAAZ;AAEA,OAAO,IAAMG,IAAI,GAAGH,QAAb","sourcesContent":["import { ApolloLink, HttpLink } from \"@apollo/client\";\nimport { AppEndpoints, EndpointType } from \"./const\";\nimport { checkContextForEndpoint } from \"./helpers\";\nimport { ApolloLinkLogger } from \"./logger\";\n\ntype DomainEndpoint = [EndpointType, HttpLink];\n\nconsole.log(HttpLink);\n\nconst createConditionalLink = (\n  appLink: ApolloLink,\n  mainEndpoint: HttpLink,\n  domainEndpoints: DomainEndpoint[]\n) =>\n  domainEndpoints.reduceRight(\n    (\n      acc,\n      [endpoint, epLink],\n      i,\n      { [i + 1]: [, nextLink] = [EndpointType.Main, mainEndpoint] }\n    ) => acc.split(checkContextForEndpoint(endpoint), epLink, nextLink),\n    appLink\n  );\n\nexport const createLink = (\n  mainEndpoint: HttpLink,\n  ...domainEndpoints: DomainEndpoint[]\n) => {\n  // other links like error reporters or auth token validations can be set here\n  const appDefaultLink = ApolloLink.from([ApolloLinkLogger]);\n\n  if (!domainEndpoints.length) return appDefaultLink.concat(mainEndpoint);\n\n  return createConditionalLink(appDefaultLink, mainEndpoint, domainEndpoints);\n};\n\nconst cmsLink = ApolloLink.split(\n  checkContextForEndpoint(EndpointType.CMS),\n  AppEndpoints.cms\n);\n\nconst authLink = ApolloLink.split(\n  checkContextForEndpoint(EndpointType.Auth),\n  AppEndpoints.auth,\n  cmsLink\n);\n\nconsole.log(authLink);\n\nexport const link = authLink;\n"]},"metadata":{},"sourceType":"module"}