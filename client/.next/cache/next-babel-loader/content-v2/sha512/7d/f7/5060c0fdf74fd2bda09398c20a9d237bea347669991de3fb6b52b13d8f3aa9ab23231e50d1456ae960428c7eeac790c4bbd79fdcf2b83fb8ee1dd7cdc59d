{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/mohammad/projects/dorreh/market multi/client/src/components/GolTextField/GolFormatInputBase/GolFormatInputBase.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport Cleave from 'cleave.js/react';\nimport React from 'react';\nimport makeStyles from './GolFormatInputBase.styles';\n\nconst GolFormatInputBase = (_ref) => {\n  let {\n    options,\n    inputRef: ref\n  } = _ref,\n      other = _objectWithoutProperties(_ref, [\"options\", \"inputRef\"]);\n\n  const {\n    root: className\n  } = makeStyles({});\n\n  const {\n    type\n  } = options,\n        rest = _objectWithoutProperties(options, [\"type\"]);\n\n  return /*#__PURE__*/_jsxDEV(Cleave, _objectSpread(_objectSpread({}, _objectSpread({\n    className,\n    ref\n  }, other)), {}, {\n    options: _objectSpread({\n      [type]: true\n    }, rest)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n\nGolFormatInputBase.displayName = 'GolFormatField';\nexport default GolFormatInputBase;","map":{"version":3,"sources":["/home/mohammad/projects/dorreh/market multi/client/src/components/GolTextField/GolFormatInputBase/GolFormatInputBase.tsx"],"names":["Cleave","React","makeStyles","GolFormatInputBase","options","inputRef","ref","other","root","className","type","rest","displayName"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,iBAAnB;AACA,OAAOC,KAAP,MAA0B,OAA1B;AACA,OAAOC,UAAP,MAAuB,6BAAvB;;AAGA,MAAMC,kBAAgD,GAAG,UAInD;AAAA,MAJoD;AACxDC,IAAAA,OADwD;AAExDC,IAAAA,QAAQ,EAAEC;AAF8C,GAIpD;AAAA,MADDC,KACC;;AACJ,QAAM;AAAEC,IAAAA,IAAI,EAAEC;AAAR,MAAsBP,UAAU,CAAC,EAAD,CAAtC;;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAoBN,OAA1B;AAAA,QAAiBO,IAAjB,4BAA0BP,OAA1B;;AAEA,sBACE,QAAC,MAAD;AACQK,IAAAA,SADR;AACmBH,IAAAA;AADnB,KAC4BC,KAD5B;AAEE,IAAA,OAAO;AAAI,OAACG,IAAD,GAAQ;AAAZ,OAAqBC,IAArB;AAFT;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAdD;;AAgBAR,kBAAkB,CAACS,WAAnB,GAAiC,gBAAjC;AAEA,eAAeT,kBAAf","sourcesContent":["import Cleave from 'cleave.js/react'\nimport React, { FC } from 'react'\nimport makeStyles from './GolFormatInputBase.styles'\nimport { IGolFormatInputBaseProps } from './GolFormatInputBase.types'\n\nconst GolFormatInputBase: FC<IGolFormatInputBaseProps> = ({\n  options,\n  inputRef: ref,\n  ...other\n}) => {\n  const { root: className } = makeStyles({})\n  const { type, ...rest } = options\n\n  return (\n    <Cleave\n      {...{ className, ref, ...(other as any) }}\n      options={{ [type]: true, ...rest }}\n    />\n  )\n}\n\nGolFormatInputBase.displayName = 'GolFormatField'\n\nexport default GolFormatInputBase\n"]},"metadata":{},"sourceType":"module"}