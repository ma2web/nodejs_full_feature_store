{"ast":null,"code":"export const byteConvertor = bytes => {\n  const sizes = ['b', 'kb', 'mb', 'gb', 'tb'];\n\n  if (bytes === 0) {\n    return 'n/a';\n  } //@ts-ignore\n\n\n  const i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)), 10);\n\n  if (i === 0) {\n    return `${bytes} ${sizes[i]}`;\n  }\n\n  return `${(bytes / 1024 ** i).toFixed(1)} ${sizes[i]}`;\n};\nexport const calcPercentage = (value, max) => {\n  const percentValue = Number((value * 100 / max).toFixed(0));\n  return value >= max ? 100 : percentValue;\n};\nexport const generateRandomNumber = (digit = 2) => {\n  return Math.floor(+Math.random().toFixed(digit) * 100);\n};\nexport const convertOpacityToAlpha = (hexColor, percent) => {\n  const alpha = Math.round(percent * 255);\n  const hex = (alpha + 0x10000).toString(16).substr(-2).toUpperCase();\n  return hexColor + hex;\n};","map":{"version":3,"sources":["/home/mohammad/projects/dorreh/market multi/client/src/utils/numbers.ts"],"names":["byteConvertor","bytes","sizes","i","parseInt","Math","floor","log","toFixed","calcPercentage","value","max","percentValue","Number","generateRandomNumber","digit","random","convertOpacityToAlpha","hexColor","percent","alpha","round","hex","toString","substr","toUpperCase"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAIC,KAAD,IAAmB;AAC9C,QAAMC,KAAK,GAAG,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkB,IAAlB,EAAwB,IAAxB,CAAd;;AACA,MAAID,KAAK,KAAK,CAAd,EAAiB;AACf,WAAO,KAAP;AACD,GAJ6C,CAK9C;;;AACA,QAAME,CAAC,GAAGC,QAAQ,CAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,GAAL,CAASN,KAAT,IAAkBI,IAAI,CAACE,GAAL,CAAS,IAAT,CAA7B,CAAD,EAA+C,EAA/C,CAAlB;;AACA,MAAIJ,CAAC,KAAK,CAAV,EAAa;AACX,WAAQ,GAAEF,KAAM,IAAGC,KAAK,CAACC,CAAD,CAAI,EAA5B;AACD;;AACD,SAAQ,GAAE,CAACF,KAAK,GAAG,QAAQE,CAAjB,EAAoBK,OAApB,CAA4B,CAA5B,CAA+B,IAAGN,KAAK,CAACC,CAAD,CAAI,EAArD;AACD,CAXM;AAaP,OAAO,MAAMM,cAAc,GAAG,CAACC,KAAD,EAAgBC,GAAhB,KAAwC;AACpE,QAAMC,YAAY,GAAGC,MAAM,CAAC,CAAEH,KAAK,GAAG,GAAT,GAAgBC,GAAjB,EAAsBH,OAAtB,CAA8B,CAA9B,CAAD,CAA3B;AACA,SAAOE,KAAK,IAAIC,GAAT,GAAe,GAAf,GAAqBC,YAA5B;AACD,CAHM;AAKP,OAAO,MAAME,oBAAoB,GAAG,CAACC,KAAK,GAAG,CAAT,KAAe;AACjD,SAAOV,IAAI,CAACC,KAAL,CAAW,CAACD,IAAI,CAACW,MAAL,GAAcR,OAAd,CAAsBO,KAAtB,CAAD,GAAgC,GAA3C,CAAP;AACD,CAFM;AAIP,OAAO,MAAME,qBAAqB,GAAG,CAACC,QAAD,EAAkBC,OAAlB,KAAsC;AACzE,QAAMC,KAAK,GAAGf,IAAI,CAACgB,KAAL,CAAWF,OAAO,GAAG,GAArB,CAAd;AACA,QAAMG,GAAG,GAAG,CAACF,KAAK,GAAG,OAAT,EAAkBG,QAAlB,CAA2B,EAA3B,EAA+BC,MAA/B,CAAsC,CAAC,CAAvC,EAA0CC,WAA1C,EAAZ;AACA,SAAOP,QAAQ,GAACI,GAAhB;AACD,CAJM","sourcesContent":["export const byteConvertor = (bytes: number) => {\n  const sizes = ['b', 'kb', 'mb', 'gb', 'tb']\n  if (bytes === 0) {\n    return 'n/a'\n  }\n  //@ts-ignore\n  const i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)), 10)\n  if (i === 0) {\n    return `${bytes} ${sizes[i]}`\n  }\n  return `${(bytes / 1024 ** i).toFixed(1)} ${sizes[i]}`\n}\n\nexport const calcPercentage = (value: number, max: number): number => {\n  const percentValue = Number(((value * 100) / max).toFixed(0))\n  return value >= max ? 100 : percentValue\n}\n\nexport const generateRandomNumber = (digit = 2) => {\n  return Math.floor(+Math.random().toFixed(digit) * 100) as any\n}\n\nexport const convertOpacityToAlpha = (hexColor: string,percent: number) => {\n  const alpha = Math.round(percent * 255);\n  const hex = (alpha + 0x10000).toString(16).substr(-2).toUpperCase();\n  return hexColor+hex\n}"]},"metadata":{},"sourceType":"module"}