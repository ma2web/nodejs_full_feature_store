{"ast":null,"code":"export var byteConvertor = function byteConvertor(bytes) {\n  var sizes = ['b', 'kb', 'mb', 'gb', 'tb'];\n\n  if (bytes === 0) {\n    return 'n/a';\n  } //@ts-ignore\n\n\n  var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)), 10);\n\n  if (i === 0) {\n    return \"\".concat(bytes, \" \").concat(sizes[i]);\n  }\n\n  return \"\".concat((bytes / Math.pow(1024, i)).toFixed(1), \" \").concat(sizes[i]);\n};\nexport var calcPercentage = function calcPercentage(value, max) {\n  var percentValue = Number((value * 100 / max).toFixed(0));\n  return value >= max ? 100 : percentValue;\n};\nexport var generateRandomNumber = function generateRandomNumber() {\n  var digit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n  return Math.floor(+Math.random().toFixed(digit) * 100);\n};\nexport var convertOpacityToAlpha = function convertOpacityToAlpha(hexColor, percent) {\n  var alpha = Math.round(percent * 255);\n  var hex = (alpha + 0x10000).toString(16).substr(-2).toUpperCase();\n  return hexColor + hex;\n};","map":{"version":3,"sources":["/home/mohammad/projects/dorreh/market multi/client/src/utils/numbers.ts"],"names":["byteConvertor","bytes","sizes","i","parseInt","Math","floor","log","toFixed","calcPercentage","value","max","percentValue","Number","generateRandomNumber","digit","random","convertOpacityToAlpha","hexColor","percent","alpha","round","hex","toString","substr","toUpperCase"],"mappings":"AAAA,OAAO,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAmB;AAC9C,MAAMC,KAAK,GAAG,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkB,IAAlB,EAAwB,IAAxB,CAAd;;AACA,MAAID,KAAK,KAAK,CAAd,EAAiB;AACf,WAAO,KAAP;AACD,GAJ6C,CAK9C;;;AACA,MAAME,CAAC,GAAGC,QAAQ,CAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,GAAL,CAASN,KAAT,IAAkBI,IAAI,CAACE,GAAL,CAAS,IAAT,CAA7B,CAAD,EAA+C,EAA/C,CAAlB;;AACA,MAAIJ,CAAC,KAAK,CAAV,EAAa;AACX,qBAAUF,KAAV,cAAmBC,KAAK,CAACC,CAAD,CAAxB;AACD;;AACD,mBAAU,CAACF,KAAK,YAAG,IAAH,EAAWE,CAAX,CAAN,EAAoBK,OAApB,CAA4B,CAA5B,CAAV,cAA4CN,KAAK,CAACC,CAAD,CAAjD;AACD,CAXM;AAaP,OAAO,IAAMM,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAAgBC,GAAhB,EAAwC;AACpE,MAAMC,YAAY,GAAGC,MAAM,CAAC,CAAEH,KAAK,GAAG,GAAT,GAAgBC,GAAjB,EAAsBH,OAAtB,CAA8B,CAA9B,CAAD,CAA3B;AACA,SAAOE,KAAK,IAAIC,GAAT,GAAe,GAAf,GAAqBC,YAA5B;AACD,CAHM;AAKP,OAAO,IAAME,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAe;AAAA,MAAdC,KAAc,uEAAN,CAAM;AACjD,SAAOV,IAAI,CAACC,KAAL,CAAW,CAACD,IAAI,CAACW,MAAL,GAAcR,OAAd,CAAsBO,KAAtB,CAAD,GAAgC,GAA3C,CAAP;AACD,CAFM;AAIP,OAAO,IAAME,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,QAAD,EAAkBC,OAAlB,EAAsC;AACzE,MAAMC,KAAK,GAAGf,IAAI,CAACgB,KAAL,CAAWF,OAAO,GAAG,GAArB,CAAd;AACA,MAAMG,GAAG,GAAG,CAACF,KAAK,GAAG,OAAT,EAAkBG,QAAlB,CAA2B,EAA3B,EAA+BC,MAA/B,CAAsC,CAAC,CAAvC,EAA0CC,WAA1C,EAAZ;AACA,SAAOP,QAAQ,GAACI,GAAhB;AACD,CAJM","sourcesContent":["export const byteConvertor = (bytes: number) => {\n  const sizes = ['b', 'kb', 'mb', 'gb', 'tb']\n  if (bytes === 0) {\n    return 'n/a'\n  }\n  //@ts-ignore\n  const i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)), 10)\n  if (i === 0) {\n    return `${bytes} ${sizes[i]}`\n  }\n  return `${(bytes / 1024 ** i).toFixed(1)} ${sizes[i]}`\n}\n\nexport const calcPercentage = (value: number, max: number): number => {\n  const percentValue = Number(((value * 100) / max).toFixed(0))\n  return value >= max ? 100 : percentValue\n}\n\nexport const generateRandomNumber = (digit = 2) => {\n  return Math.floor(+Math.random().toFixed(digit) * 100) as any\n}\n\nexport const convertOpacityToAlpha = (hexColor: string,percent: number) => {\n  const alpha = Math.round(percent * 255);\n  const hex = (alpha + 0x10000).toString(16).substr(-2).toUpperCase();\n  return hexColor+hex\n}"]},"metadata":{},"sourceType":"module"}