{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { EndpointType } from './const';\nexport const contextWithEndpoint = (endpoint = EndpointType.CMS, context) => ({\n  context: _objectSpread(_objectSpread({}, context), {}, {\n    endpoint\n  })\n});\nexport const checkContextForEndpoint = (endpoint = EndpointType.CMS) => operation => operation.getContext().endpoint === endpoint;","map":{"version":3,"sources":["/home/mohammad/projects/dorreh/market multi/client/src/core/apollo/helpers.ts"],"names":["EndpointType","contextWithEndpoint","endpoint","CMS","context","checkContextForEndpoint","operation","getContext"],"mappings":";;;;;;AACA,SAASA,YAAT,QAA6B,SAA7B;AAEA,OAAO,MAAMC,mBAAmB,GAAG,CACjCC,QAAQ,GAAGF,YAAY,CAACG,GADS,EAEjCC,OAFiC,MAG7B;AACJA,EAAAA,OAAO,kCAAOA,OAAP;AAAgBF,IAAAA;AAAhB;AADH,CAH6B,CAA5B;AAOP,OAAO,MAAMG,uBAAuB,GAAG,CAACH,QAAQ,GAAGF,YAAY,CAACG,GAAzB,KACrCG,SADsE,IAEnEA,SAAS,CAACC,UAAV,GAAuBL,QAAvB,KAAoCA,QAFlC","sourcesContent":["import { Operation } from '@apollo/client'\nimport { EndpointType } from './const'\n\nexport const contextWithEndpoint = (\n  endpoint = EndpointType.CMS,\n  context?: Record<string, any>,\n) => ({\n  context: { ...context, endpoint },\n})\n\nexport const checkContextForEndpoint = (endpoint = EndpointType.CMS) => (\n  operation: Operation,\n) => operation.getContext().endpoint === endpoint\n\n"]},"metadata":{},"sourceType":"module"}