{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/mohammad/projects/dorreh/market multi/client/src/domains/Auth/components/SignInPage/SignInPage.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport useSignInPageStyle from \"./useSignInPageStyle\";\nimport { Grid, Typography, useTheme } from \"@material-ui/core\";\nimport { useIntl } from \"react-intl\";\nimport SignInPageMessages from \"./SignInPage.messages\";\nimport GolButton from \"components/GolButton\";\nimport GolTextField from \"components/GolTextField\";\nimport { ReactComponent as EmailIcon } from \"assets/images/icons/Commiunication/Email.svg\";\nimport { ReactComponent as LockIcon } from \"assets/images/icons/Security/Lock.svg\";\nimport { useRouter } from \"next/router\";\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { ReactComponent as VisibleIcon } from \"assets/images/icons/Security/visible.svg\";\nimport { ReactComponent as InvisibleIcon } from \"assets/images/icons/Security/invisible.svg\";\nimport BabyPng from \"assets/images/pictures/baby.jpg\"; // import { ReactComponent as GoogleSvg } from \"assets/images/icons/Logo/Google.svg\";\n\nimport GoogleSvg from \"assets/images/icons/Logo/Google.png\";\nimport AuthLayout from \"domains/Auth/components/AuthLayout\";\nimport { signIn } from \"next-auth/client\";\nimport { toast } from \"react-toastify\";\n\nconst SignInPage = () => {\n  const classes = useSignInPageStyle();\n  const [values, setValues] = React.useState({\n    password: \"\",\n    showPassword: false\n  });\n  const [loginData, setLoginData] = React.useState({\n    email: \"\",\n    password: \"\"\n  });\n  const [loading, setLoading] = React.useState(false);\n  const {\n    formatMessage\n  } = useIntl();\n  const [userNameType, setuserNameType] = React.useState(\"email\");\n  const {\n    locale,\n    asPath,\n    push\n  } = useRouter();\n\n  const handleuserNameType = (event, newuserNameType) => {\n    setuserNameType(newuserNameType);\n  };\n\n  const handleClickShowPassword = () => {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      showPassword: !values.showPassword\n    }));\n  };\n\n  const handleMouseDownPassword = event => {\n    event.preventDefault();\n  };\n\n  const theme = useTheme();\n\n  const onSubmit = () => {\n    setLoading(true);\n    console.log(loginData);\n\n    if (loginData !== null && loginData !== void 0 && loginData.email && loginData !== null && loginData !== void 0 && loginData.password) {\n      signIn(\"SIGN_IN\", {\n        username: loginData === null || loginData === void 0 ? void 0 : loginData.email,\n        password: loginData === null || loginData === void 0 ? void 0 : loginData.password,\n        redirect: false\n      }).then(res => {\n        console.log(res);\n\n        if ((res === null || res === void 0 ? void 0 : res.error) === \"IncorrectUsernameOrPassword\") {\n          setLoading(false);\n          toast.error(res === null || res === void 0 ? void 0 : res.error);\n        } else {\n          toast.success(\"authentication successfully\");\n          push(\"/\");\n        }\n      });\n    } else {\n      toast.error(\"enter your email and password\");\n      setLoading(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthLayout, {\n    authBG: BabyPng,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.subTitle,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"caption\",\n          children: formatMessage(SignInPageMessages.subTitle)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.title,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h3\",\n          children: formatMessage(SignInPageMessages.title)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.userNameWrapper,\n        children: /*#__PURE__*/_jsxDEV(GolTextField, {\n          label: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: classes.textFieldLabel,\n            children: [/*#__PURE__*/_jsxDEV(EmailIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: formatMessage(SignInPageMessages.emailInput)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this),\n          value: loginData === null || loginData === void 0 ? void 0 : loginData.email,\n          onChange: e => setLoginData(_objectSpread(_objectSpread({}, loginData), {}, {\n            email: e.target.value\n          }))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.passwordWrapper,\n        children: /*#__PURE__*/_jsxDEV(FormControl, {\n          variant: \"outlined\",\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            className: classes.passLabel,\n            htmlFor: \"outlined-adornment-password\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: classes.textFieldLabel,\n              children: [/*#__PURE__*/_jsxDEV(LockIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: formatMessage(SignInPageMessages.passInput)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(OutlinedInput, {\n            id: \"outlined-adornment-password\",\n            type: values.showPassword ? \"text\" : \"password\",\n            value: loginData === null || loginData === void 0 ? void 0 : loginData.password,\n            onChange: e => setLoginData(_objectSpread(_objectSpread({}, loginData), {}, {\n              password: e.target.value\n            })),\n            endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"end\",\n              children: /*#__PURE__*/_jsxDEV(IconButton, {\n                \"aria-label\": \"toggle password visibility\",\n                onClick: handleClickShowPassword,\n                onMouseDown: handleMouseDownPassword,\n                edge: \"end\",\n                children: values.showPassword ? /*#__PURE__*/_jsxDEV(VisibleIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 139,\n                  columnNumber: 44\n                }, this) : /*#__PURE__*/_jsxDEV(InvisibleIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 139,\n                  columnNumber: 62\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 17\n            }, this),\n            labelWidth: 70\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      className: classes.forgetPassLink,\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        onClick: () => push(\"/forgetPassword\"),\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle2\",\n          component: \"span\",\n          children: formatMessage(SignInPageMessages.forgetPassLink)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(GolButton, {\n        disabled: loading ? true : false,\n        onClick: onSubmit,\n        fullWidth: true,\n        style: {\n          width: \"100%\"\n        },\n        children: loading ? \"loading...\" : formatMessage(SignInPageMessages.signIn)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(GolButton, {\n        variant: \"outlined\",\n        fullWidth: true,\n        className: classes.withGoogle,\n        style: {\n          width: \"100%\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: GoogleSvg,\n          alt: \"google\",\n          width: \"20\",\n          style: {\n            marginRight: theme.direction === \"ltr\" ? 5 : 0,\n            marginLeft: theme.direction === \"rtl\" ? 5 : 0\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), formatMessage(SignInPageMessages.signInWithGoogle)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      className: classes.noHaveAccount,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          onClick: () => push(\"/signUp\"),\n          variant: \"subtitle2\",\n          component: \"a\",\n          className: classes.noHaveAccount,\n          children: [formatMessage(SignInPageMessages.notHaveAccount), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: theme.palette.primary[700],\n              cursor: \"pointer\"\n            },\n            onClick: () => push(\"/signIn\"),\n            children: formatMessage(SignInPageMessages.signUp)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n\nexport default SignInPage;","map":{"version":3,"sources":["/home/mohammad/projects/dorreh/market multi/client/src/domains/Auth/components/SignInPage/SignInPage.tsx"],"names":["React","useSignInPageStyle","Grid","Typography","useTheme","useIntl","SignInPageMessages","GolButton","GolTextField","ReactComponent","EmailIcon","LockIcon","useRouter","OutlinedInput","InputLabel","InputAdornment","FormControl","IconButton","VisibleIcon","InvisibleIcon","BabyPng","GoogleSvg","AuthLayout","signIn","toast","SignInPage","classes","values","setValues","useState","password","showPassword","loginData","setLoginData","email","loading","setLoading","formatMessage","userNameType","setuserNameType","locale","asPath","push","handleuserNameType","event","newuserNameType","handleClickShowPassword","handleMouseDownPassword","preventDefault","theme","onSubmit","console","log","username","redirect","then","res","error","success","subTitle","title","userNameWrapper","textFieldLabel","emailInput","e","target","value","passwordWrapper","passLabel","passInput","forgetPassLink","width","withGoogle","display","alignItems","justifyContent","marginRight","direction","marginLeft","signInWithGoogle","noHaveAccount","notHaveAccount","color","palette","primary","cursor","signUp"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useSignInPageStyle from \"./useSignInPageStyle\";\nimport { Grid, TextField, Typography, useTheme } from \"@material-ui/core\";\nimport { useIntl } from \"react-intl\";\nimport SignInPageMessages from \"./SignInPage.messages\";\nimport GolButton from \"components/GolButton\";\nimport GolTextField from \"components/GolTextField\";\nimport { ReactComponent as EmailIcon } from \"assets/images/icons/Commiunication/Email.svg\";\nimport { ReactComponent as PhoneIcon } from \"assets/images/icons/Commiunication/Phone.svg\";\nimport { ReactComponent as LockIcon } from \"assets/images/icons/Security/Lock.svg\";\nimport { CssBaseline, ThemeProvider } from \"@material-ui/core\";\nimport { useRouter } from \"next/router\";\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { ReactComponent as VisibleIcon } from \"assets/images/icons/Security/visible.svg\";\nimport { ReactComponent as InvisibleIcon } from \"assets/images/icons/Security/invisible.svg\";\nimport BabyPng from \"assets/images/pictures/baby.jpg\";\n// import { ReactComponent as GoogleSvg } from \"assets/images/icons/Logo/Google.svg\";\nimport GoogleSvg from \"assets/images/icons/Logo/Google.png\";\nimport AuthLayout from \"domains/Auth/components/AuthLayout\";\nimport { useChangeDirection, useChangePalette } from \"theme/GolThemeProvider\";\nimport { signIn } from \"next-auth/client\";\nimport { toast } from \"react-toastify\";\n\nconst SignInPage = () => {\n  const classes = useSignInPageStyle();\n\n  const [values, setValues] = React.useState({\n    password: \"\",\n    showPassword: false,\n  });\n  const [loginData, setLoginData] = React.useState({\n    email: \"\",\n    password: \"\",\n  });\n  const [loading, setLoading] = React.useState(false);\n  const { formatMessage } = useIntl();\n  const [userNameType, setuserNameType] = React.useState(\"email\");\n\n  const { locale, asPath, push } = useRouter();\n\n  const handleuserNameType = (event, newuserNameType) => {\n    setuserNameType(newuserNameType);\n  };\n\n  const handleClickShowPassword = () => {\n    setValues({ ...values, showPassword: !values.showPassword });\n  };\n\n  const handleMouseDownPassword = (event) => {\n    event.preventDefault();\n  };\n\n  const theme = useTheme();\n\n  const onSubmit = () => {\n    setLoading(true);\n\n    console.log(loginData);\n\n    if (loginData?.email && loginData?.password) {\n      signIn(\"SIGN_IN\", {\n        username: loginData?.email,\n        password: loginData?.password,\n        redirect: false,\n      }).then((res: any) => {\n        console.log(res);\n        if (res?.error === \"IncorrectUsernameOrPassword\") {\n          setLoading(false);\n          toast.error(res?.error);\n        } else {\n          toast.success(\"authentication successfully\");\n          push(\"/\");\n        }\n      });\n    } else {\n      toast.error(\"enter your email and password\");\n      setLoading(false);\n    }\n  };\n\n  return (\n    <AuthLayout authBG={BabyPng}>\n      <Grid item xs={12}>\n        <div className={classes.subTitle}>\n          <Typography variant=\"caption\">\n            {formatMessage(SignInPageMessages.subTitle)}\n          </Typography>\n        </div>\n        <div className={classes.title}>\n          <Typography variant=\"h3\">\n            {formatMessage(SignInPageMessages.title)}\n          </Typography>\n        </div>\n        <div className={classes.userNameWrapper}>\n          <GolTextField\n            label={\n              <span className={classes.textFieldLabel}>\n                <EmailIcon />\n                <span>{formatMessage(SignInPageMessages.emailInput)}</span>\n              </span>\n            }\n            value={loginData?.email}\n            onChange={(e) =>\n              setLoginData({ ...loginData, email: e.target.value })\n            }\n          />\n        </div>\n        <div className={classes.passwordWrapper}>\n          <FormControl variant=\"outlined\">\n            <InputLabel\n              className={classes.passLabel}\n              htmlFor=\"outlined-adornment-password\"\n            >\n              <span className={classes.textFieldLabel}>\n                <LockIcon />\n                <span>{formatMessage(SignInPageMessages.passInput)}</span>\n              </span>\n            </InputLabel>\n            <OutlinedInput\n              id=\"outlined-adornment-password\"\n              type={values.showPassword ? \"text\" : \"password\"}\n              value={loginData?.password}\n              onChange={(e) =>\n                setLoginData({ ...loginData, password: e.target.value })\n              }\n              endAdornment={\n                <InputAdornment position=\"end\">\n                  <IconButton\n                    aria-label=\"toggle password visibility\"\n                    onClick={handleClickShowPassword}\n                    onMouseDown={handleMouseDownPassword}\n                    edge=\"end\"\n                  >\n                    {values.showPassword ? <VisibleIcon /> : <InvisibleIcon />}\n                  </IconButton>\n                </InputAdornment>\n              }\n              labelWidth={70}\n            />\n          </FormControl>\n          {/* <GolTextField\n            type=\"password\"\n            label={\n              <span className={classes.textFieldLabel}>\n                <LockIcon />\n                <span>{formatMessage(SignInPageMessages.passInput)}</span>\n              </span>\n            }\n          /> */}\n        </div>\n      </Grid>\n      <Grid item xs={12} className={classes.forgetPassLink}>\n        <a onClick={() => push(\"/forgetPassword\")}>\n          <Typography variant=\"subtitle2\" component=\"span\">\n            {formatMessage(SignInPageMessages.forgetPassLink)}\n          </Typography>\n        </a>\n      </Grid>\n      <Grid item xs={12}>\n        <GolButton\n          disabled={loading ? true : false}\n          onClick={onSubmit}\n          fullWidth\n          style={{ width: \"100%\" }}\n        >\n          {loading ? \"loading...\" : formatMessage(SignInPageMessages.signIn)}\n        </GolButton>\n      </Grid>\n      <Grid item xs={12}>\n        <GolButton\n          variant=\"outlined\"\n          fullWidth\n          className={classes.withGoogle}\n          style={{\n            width: \"100%\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          {/* <GoogleSvg\n            style={{\n              marginRight: 10,\n            }}\n          /> */}\n          <img\n            src={GoogleSvg}\n            alt=\"google\"\n            width=\"20\"\n            style={{\n              marginRight: theme.direction === \"ltr\" ? 5 : 0,\n              marginLeft: theme.direction === \"rtl\" ? 5 : 0,\n            }}\n          />\n          {formatMessage(SignInPageMessages.signInWithGoogle)}\n        </GolButton>\n      </Grid>\n      <Grid item xs={12} className={classes.noHaveAccount}>\n        <div>\n          <Typography\n            onClick={() => push(\"/signUp\")}\n            variant=\"subtitle2\"\n            component=\"a\"\n            className={classes.noHaveAccount}\n          >\n            {formatMessage(SignInPageMessages.notHaveAccount)}\n            <span\n              style={{\n                color: theme.palette.primary[700],\n                cursor: \"pointer\",\n              }}\n              onClick={() => push(\"/signIn\")}\n            >\n              {formatMessage(SignInPageMessages.signUp)}\n            </span>\n          </Typography>\n        </div>\n      </Grid>\n    </AuthLayout>\n  );\n};\n\nexport default SignInPage;\n"]},"metadata":{},"sourceType":"module"}